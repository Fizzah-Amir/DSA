// valid parentheses (Stacks).cpp : This file contains the 'main' function. Program execution begins and ends there.
//

#include <iostream>
#include<stack>
#include<string>
#define stac_size 101//101 size so indexing from 0 to 100 
char s[stac_size];
int top = -1;
using namespace std;
bool empty() {
	if (top == -1) {
		return true;
	}
	return false;
}
void push(char a) {
	if (top >= stac_size - 1) {
		return;
	}
	s[++top] = a;
}
char pop() {
	if (top == -1) {
		return '\0';
	}
	char popped = s[top];
	top--;
	return popped;
}
bool isValid(string expo) {
	char ch;
	for (int i = 0; i < expo.length(); i++) {
		ch = expo[i];
		if (ch == '(' || ch == '{' || ch == '[') {
			push(ch);
		}
		else {
			if (empty()) {
				return false;
			}
		//comes with closing brakects and then pop here
			char top = pop(); //returns char at top position of stack
			if (!(ch == ')' && top == '(' || ch == '}' && top == '{' || ch == ']' && top == '[')) {
				return false;
			}

		}
	}
	return top==-1;//valid parentheses
}
int main() {
	string expo = { "[()]" };
	bool p=isValid(expo);
	if (p) {
		cout << "it is a valid parentheses";
	}
	else {
		cout << "incorrect parentheses";
	}
	return 0;
}
